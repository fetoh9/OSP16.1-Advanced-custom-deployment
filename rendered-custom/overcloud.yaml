# primary role is: Controller
heat_template_version: rocky

description: >
  Deploy an OpenStack environment, consisting of several node types (roles),
  Controller, Compute, BlockStorage, SwiftStorage and CephStorage. The Storage
  roles enable independent scaling of the storage components, but the minimal
  deployment is one Controller and one Compute node.


# TODO(shadower): we should probably use the parameter groups to put
# some order in here.
parameters:

  # Common parameters (not specific to
  CloudNameStorage:
    default: overcloud.storage.localdomain
    description: >
      The DNS name of this cloud's storage endpoint. E.g.
      'ci-overcloud.storage.tripleo.org'.
    type: string
  StorageVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the StorageVirtualInterface port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  # Special case StorageMgmt hostname param, which is CloudNameStorageManagement
  CloudNameStorageManagement:
    default: overcloud.storagemgmt.localdomain
    description: >
      The DNS name of this cloud's storage_mgmt endpoint. E.g.
      'ci-overcloud.storagemgmt.tripleo.org'.
    type: string
  StorageMgmtVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the StorageMgmtVirtualInterface port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  # Special case the Internal API hostname param, which is CloudNameInternal
  CloudNameInternal:
    default: overcloud.internalapi.localdomain
    description: >
      The DNS name of this cloud's internal_api endpoint. E.g.
      'ci-overcloud.internalapi.tripleo.org'.
    type: string
  InternalApiVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the InternalApiVirtualInterface port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  # Special case the External hostname param, which is CloudName
  CloudName:
    default: overcloud.localdomain
    description: The DNS name of this cloud. E.g. ci-overcloud.tripleo.org
    type: string
  # TODO (dsneddon) Legacy name, eventually refactor to match network name
  PublicVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the PublicVirtualInterface port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  ExternalVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the ExternalVirtualInterface port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  CloudNameCtlplane:
    default: overcloud.ctlplane.localdomain
    description: >
      The DNS name of this cloud's provisioning network endpoint. E.g.
      'ci-overcloud.ctlplane.tripleo.org'.
    type: string
  ExtraHostFileEntries:
    default: []
    description: List of extra hosts entries to be appended to /etc/hosts
    type: comma_delimited_list
  UndercloudHostsEntries:
    default: []
    description: >
      List of undercloud hosts entries to be appended to /etc/hosts. The
      value is populated with the HEAT_HOSTS entries on the undercloud by
      tripleoclient when running deploy.
    type: comma_delimited_list
  EndpointMapOverride:
    default: {}
    description: Can be used to override the calcluated EndpointMap
    type: json
  ExtraConfig:
    default: {}
    description: |
      Additional hiera configuration to inject into the cluster.
    type: json
  NeutronControlPlaneID:
    default: 'ctlplane'
    type: string
    description: Neutron ID or name for ctlplane network.
  NeutronPhysicalBridge:
    default: 'br-ex'
    description: An OVS bridge to create for accessing external networks.
    type: string
  NeutronPublicInterface:
    default: nic1
    description: Which interface to add to the NeutronPhysicalBridge.
    type: string
  ControlPlaneSubnet:
    description: The name of the undercloud Neutron control plane subnet
    default: ctlplane-subnet
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlFixedIPs:
    default: []
    description: >
        Control the IP allocation for the ControlVirtualIP port. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  RabbitCookieSalt:
    type: string
    default: unset
    description: Salt for the rabbit cookie, change this to force the randomly generated rabbit cookie to change.
  RedisVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the virtual IP used by Redis. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  OVNDBsVirtualFixedIPs:
    default: []
    description: >
        Control the IP allocation for the virtual IP used by OVN DBs. E.g.
        [{'ip_address':'1.2.3.4'}]
    type: json
  CloudDomain:
    default: 'localdomain'
    type: string
    description: >
      The DNS domain used for the hosts. This must match the
      overcloud_domain_name configured on the undercloud.
  ServerMetadata:
    default: {}
    description: >
      Extra properties or metadata passed to Nova for the created nodes in
      the overcloud. It's accessible via the Nova metadata API.
    type: json
  NetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: ['CREATE']
# Compute-specific params
# FIXME(shardy) handle these deprecated names as they don't match compute.yaml
  HypervisorNeutronPhysicalBridge:
    default: 'br-ex'
    description: >
      An OVS bridge to create on each hypervisor. This defaults to br-ex the
      same as the control plane nodes, as we have a uniform configuration of
      the openvswitch agent. Typically should not need to be changed.
    type: string
  HypervisorNeutronPublicInterface:
    default: nic1
    description: What interface to add to the HypervisorNeutronPhysicalBridge.
    type: string

  NodeCreateBatchSize:
    default: 30
    description: Maxiumum batch size for creating nodes
    type: number

  NovaAdditionalCell:
    default: false
    description: Whether this is an cell additional to the default cell.
    type: boolean

  NovaLocalMetadataPerCell:
    default: false
    description: >
      Indicates that the nova-metadata API service has been deployed
      per-cell, so that we can have better performance and data isolation in a
      multi-cell deployment. Users should consider the use of this configuration
      depending on how neutron is setup. If networks span cells, you might need
      to run nova-metadata API service globally. If your networks are segmented
      along cell boundaries, then you can run nova-metadata API service per cell.
      When running nova-metadata API service per cell, you should also configure
      each Neutron metadata-agent to point to the corresponding nova-metadata API
      service.
    type: boolean

  # Jinja loop for Role in role_data.yaml

  ControllerExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  controllerExtraConfig:
    default: {}
    description: |
      DEPRECATED use ControllerExtraConfig instead
    type: json
  # Parameters generated for Controller Role
  ControllerServices:
    description: A list of service resources (configured in the Heat
                 resource_registry) which represent nested stacks
                 for each service that should get installed on the Controller role.
    type: comma_delimited_list
  ControllerNetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: []
  ControllerAnyErrorsFatal:
    default: yes
    type: string
  ControllerMaxFailPercentage:
    default: 15
    type: number
  ControllerCount:
    description: Number of Controller nodes to deploy
    type: number
    default: 1

  ControllerHostnameFormat:
    type: string
    description: >
      Format for Controller node hostnames
      Note %index% is translated into the index of the node, e.g 0/1/2 etc
      and %stackname% is replaced with the stack name e.g overcloud
  
    default: "%stackname%-controller-%index%"
  
  ControllerRemovalPolicies:
    default: []
    type: json
    description: >
      List of resources to be removed from Controller ResourceGroup when
      doing an update which requires removal of specific resources.
      Example format ComputeRemovalPolicies: [{'resource_list': ['0']}]

  ControllerRemovalPoliciesMode:
    default: append
    type: string
    description: >
      How to handle change to RemovalPolicies for Controller
      ResourceGroup when doing an update. Default mode 'append' will
      append to the existing blacklist and 'update' would replace
      the blacklist.

  ControllerSchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}

  ControllerParameters:
    type: json
    description: Optional Role Specific parameters to be provided to service
    default: {}

  ComputeInstanceHAExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  # Parameters generated for ComputeInstanceHA Role
  ComputeInstanceHAServices:
    description: A list of service resources (configured in the Heat
                 resource_registry) which represent nested stacks
                 for each service that should get installed on the ComputeInstanceHA role.
    type: comma_delimited_list
  ComputeInstanceHANetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: []
  ComputeInstanceHAAnyErrorsFatal:
    default: yes
    type: string
  ComputeInstanceHAMaxFailPercentage:
    default: 15
    type: number
  ComputeInstanceHACount:
    description: Number of ComputeInstanceHA nodes to deploy
    type: number
    default: 1

  ComputeInstanceHAHostnameFormat:
    type: string
    description: >
      Format for ComputeInstanceHA node hostnames
      Note %index% is translated into the index of the node, e.g 0/1/2 etc
      and %stackname% is replaced with the stack name e.g overcloud
  
    default: "%stackname%-novacomputeiha-%index%"
  
  ComputeInstanceHARemovalPolicies:
    default: []
    type: json
    description: >
      List of resources to be removed from ComputeInstanceHA ResourceGroup when
      doing an update which requires removal of specific resources.
      Example format ComputeRemovalPolicies: [{'resource_list': ['0']}]

  ComputeInstanceHARemovalPoliciesMode:
    default: append
    type: string
    description: >
      How to handle change to RemovalPolicies for ComputeInstanceHA
      ResourceGroup when doing an update. Default mode 'append' will
      append to the existing blacklist and 'update' would replace
      the blacklist.

  ComputeInstanceHASchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}

  ComputeInstanceHAParameters:
    type: json
    description: Optional Role Specific parameters to be provided to service
    default: {}

  NetworkerExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  # Parameters generated for Networker Role
  NetworkerServices:
    description: A list of service resources (configured in the Heat
                 resource_registry) which represent nested stacks
                 for each service that should get installed on the Networker role.
    type: comma_delimited_list
  NetworkerNetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: []
  NetworkerAnyErrorsFatal:
    default: yes
    type: string
  NetworkerMaxFailPercentage:
    default: 15
    type: number
  NetworkerCount:
    description: Number of Networker nodes to deploy
    type: number
    default: 0

  NetworkerHostnameFormat:
    type: string
    description: >
      Format for Networker node hostnames
      Note %index% is translated into the index of the node, e.g 0/1/2 etc
      and %stackname% is replaced with the stack name e.g overcloud
  
    default: "%stackname%-networker-%index%"
  
  NetworkerRemovalPolicies:
    default: []
    type: json
    description: >
      List of resources to be removed from Networker ResourceGroup when
      doing an update which requires removal of specific resources.
      Example format ComputeRemovalPolicies: [{'resource_list': ['0']}]

  NetworkerRemovalPoliciesMode:
    default: append
    type: string
    description: >
      How to handle change to RemovalPolicies for Networker
      ResourceGroup when doing an update. Default mode 'append' will
      append to the existing blacklist and 'update' would replace
      the blacklist.

  NetworkerSchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}

  NetworkerParameters:
    type: json
    description: Optional Role Specific parameters to be provided to service
    default: {}

  ObjectStorageExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  # Parameters generated for ObjectStorage Role
  ObjectStorageServices:
    description: A list of service resources (configured in the Heat
                 resource_registry) which represent nested stacks
                 for each service that should get installed on the ObjectStorage role.
    type: comma_delimited_list
  ObjectStorageNetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: []
  ObjectStorageAnyErrorsFatal:
    default: yes
    type: string
  ObjectStorageMaxFailPercentage:
    default: 15
    type: number
  ObjectStorageCount:
    description: Number of ObjectStorage nodes to deploy
    type: number
    default: 0

  ObjectStorageHostnameFormat:
    type: string
    description: >
      Format for ObjectStorage node hostnames
      Note %index% is translated into the index of the node, e.g 0/1/2 etc
      and %stackname% is replaced with the stack name e.g overcloud
  
    default: "%stackname%-objectstorage-%index%"
  
  ObjectStorageRemovalPolicies:
    default: []
    type: json
    description: >
      List of resources to be removed from ObjectStorage ResourceGroup when
      doing an update which requires removal of specific resources.
      Example format ComputeRemovalPolicies: [{'resource_list': ['0']}]

  ObjectStorageRemovalPoliciesMode:
    default: append
    type: string
    description: >
      How to handle change to RemovalPolicies for ObjectStorage
      ResourceGroup when doing an update. Default mode 'append' will
      append to the existing blacklist and 'update' would replace
      the blacklist.

  ObjectStorageSchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}

  ObjectStorageParameters:
    type: json
    description: Optional Role Specific parameters to be provided to service
    default: {}


  # Identifiers to trigger tasks on nodes
  UpdateIdentifier:
    default: ''
    type: string
    description: >
      Setting to a previously unused value during stack-update will trigger
      package update on all nodes
  DeployIdentifier:
    default: ''
    type: string
    description: >
      Setting this to a unique value will re-run any deployment tasks which
      perform configuration on a Heat stack-update.
  AddVipsToEtcHosts:
    default: True
    type: boolean
    description: >
      Set to true to append per network Vips to /etc/hosts on each node.

  DeploymentServerBlacklist:
    default: []
    type: comma_delimited_list
    description: >
      List of server hostnames to blacklist from any triggered deployments.

  GlobalConfigExtraMapData:
    type: json
    default: {}
    description: Map of extra global_config_settings data to set on each node.


parameter_groups:
- label: deprecated
  description: Do not use deprecated params, they will be removed.
  parameters:
    - controllerExtraConfig

conditions:
  add_vips_to_etc_hosts: {equals : [{get_param: AddVipsToEtcHosts}, True]}
  control_fixed_ip_not_set: {equals : [{get_param: ControlFixedIPs}, []]}
  ctlplane_subnet_cidr_set:
    not:
      equals: [{get_param: ControlPlaneSubnetCidr}, '']
  storage_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: StorageVirtualFixedIPs
        - []
  storage_mgmt_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: StorageMgmtVirtualFixedIPs
        - []
  internal_api_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: InternalApiVirtualFixedIPs
        - []
  tenant_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: TenantVirtualFixedIPs
        - []
  management_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: ManagementVirtualFixedIPs
        - []
  provider_network_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: ProviderNetworkVirtualFixedIPs
        - []
  public_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: PublicVirtualFixedIPs
        - []
  redis_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: RedisVirtualFixedIPs
        - []
  ovn_dbs_virtual_fixed_ip_set:
    not:
      equals:
        - get_param: OVNDBsVirtualFixedIPs
        - []
  set_default_mysql_cell_internal:
    or:
      - equals:
        - get_param: NovaAdditionalCell
        - true
      - and:
        - equals:
          - get_param: NovaAdditionalCell
          - false
        - equals:
          - get_param: [EndpointMapOverride, MysqlCellInternal]
          - ''
  Controller_network_deployment_actions_exists:
    not:
      equals:
        - {get_param: ControllerNetworkDeploymentActions}
        - []
  ComputeInstanceHA_network_deployment_actions_exists:
    not:
      equals:
        - {get_param: ComputeInstanceHANetworkDeploymentActions}
        - []
  Networker_network_deployment_actions_exists:
    not:
      equals:
        - {get_param: NetworkerNetworkDeploymentActions}
        - []
  ObjectStorage_network_deployment_actions_exists:
    not:
      equals:
        - {get_param: ObjectStorageNetworkDeploymentActions}
        - []
  set_default_nova_vnc_proxy_cell_public:
    or:
      - equals:
        - get_param: NovaAdditionalCell
        - true
      - and:
        - equals:
          - get_param: NovaAdditionalCell
          - false
        - equals:
          - get_param: [EndpointMapOverride, NovaVNCProxyCellPublic]
          - ''
  set_default_nova_metadata_cell_internal:
    or:
      - equals:
        - get_param: NovaLocalMetadataPerCell
        - true
      - and:
        - equals:
          - get_param: NovaLocalMetadataPerCell
          - false
        - equals:
          - get_param: [EndpointMapOverride, NovaMetadataCellInternal]
          - ''

resources:

  VipHosts:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        entries:
          - str_replace:
              template: IP  HOST
              params:
                IP: {get_attr: [VipMap, net_ip_map, ctlplane]}
                HOST: {get_param: CloudNameCtlplane}
          - str_replace:
              template: IP  HOST
              params:
                IP: {get_attr: [VipMap, net_ip_map, storage]}
                HOST: {get_param: CloudNameStorage}
  # Special case StorageMgmt hostname param, which is CloudNameStorageManagement
          - str_replace:
              template: IP  HOST
              params:
                IP: {get_attr: [VipMap, net_ip_map, storage_mgmt]}
                HOST: {get_param: CloudNameStorageManagement}
  # Special case the Internal API hostname param, which is CloudNameInternal
          - str_replace:
              template: IP  HOST
              params:
                IP: {get_attr: [VipMap, net_ip_map, internal_api]}
                HOST: {get_param: CloudNameInternal}
  # Special case the External hostname param, which is CloudName
          - str_replace:
              template: IP  HOST
              params:
                IP: {get_attr: [VipMap, net_ip_map, external]}
                HOST: {get_param: CloudName}

  HeatAuthEncryptionKey:
    type: OS::TripleO::RandomString

  PcsdPassword:
    type: OS::TripleO::RandomString
    properties:
      length: 16

  HorizonSecret:
    type: OS::TripleO::RandomString
    properties:
      length: 64

  NetCidrMapValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_replace:
        - map_merge:
          - {get_attr: [Networks, net_cidr_map]}
          # NOTE(hjensas): When ctlplane network and subnets are created by the
          # undercloud installer, the subnet cidrs are added as tags.
          - ctlplane: {get_attr: [ControlVirtualIP, network, tags]}
        - keys:
            ctlplane: {get_param: NeutronControlPlaneID}

  ServiceNetMap:
    type: OS::TripleO::ServiceNetMap

  EndpointMap:
    type: OS::TripleO::EndpointMap
    properties:
      CloudEndpoints:
        ctlplane: {get_param: CloudNameCtlplane}
        storage: {get_param: CloudNameStorage}
  # Special case StorageMgmt hostname param, which is CloudNameStorageManagement
        storage_mgmt: {get_param: CloudNameStorageManagement}
  # Special case the Internal API hostname param, which is CloudNameInternal
        internal_api: {get_param: CloudNameInternal}
  # Special case the External hostname param, which is CloudName
        external: {get_param: CloudName}
      NetIpMap: {get_attr: [VipMap, net_ip_map]}
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}

  EndpointMapData:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          - {get_attr: [EndpointMap, endpoint_map]}
          - {get_param: EndpointMapOverride}
            # For parent stack we must set these to the local endpoints
            # For split-controlplane stacks that are nova cells we must set
            # these to the local endpoints
            # For split-controlplane stacks that are not nova cells we should
            # take these from EndpointMapOverride (i.e the parent stack)
          - if:
            - set_default_mysql_cell_internal
            - MysqlCellInternal: {get_attr: [EndpointMap, endpoint_map, MysqlInternal]}
            - {}
          - if:
            - set_default_nova_vnc_proxy_cell_public
            - NovaVNCProxyCellPublic: {get_attr: [EndpointMap, endpoint_map, NovaVNCProxyPublic]}
            - {}
          - if:
            - set_default_nova_metadata_cell_internal
            - NovaMetadataCellInternal: {get_attr: [EndpointMap, endpoint_map, NovaMetadataInternal]}
            - {}

  # Creates the "heat-admin" user if configured via the environment
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeAdminUserData:
    type: OS::TripleO::NodeAdminUserData

  # Bootstraps an ntp configuration and includes a hardware clock sync to
  # for containers.
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeTimesyncUserData:
    type: OS::TripleO::NodeTimesyncUserData

  # For optional operator additional userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeUserData:
    type: OS::TripleO::NodeUserData

  # Jinja loop for Role in roles_data.yaml

  # Resources generated for Controller Role
  ControllerServiceChain:
    type: OS::TripleO::ControllerServices
    properties:
      Services:
        get_param: ControllerServices
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
      ServiceData:
        net_cidr_map: {get_attr: [NetCidrMapValue, value]}
        net_vip_map: {get_attr: [VipMap, net_ip_map]}
      EndpointMap: {get_attr: [EndpointMapData, value]}
      DefaultPasswords: {get_attr: [DefaultPasswords, passwords]}
      RoleName: Controller
      RoleParameters:
        map_merge:
          - {}
          - get_param: ControllerParameters

  # Lookup of role_data via heat outputs is slow, so workaround this by caching
  # the value in an OS::Heat::Value resource
  ControllerServiceChainRoleData:
    type: OS::Heat::Value
    properties:
      type: json
      value: {get_attr: [ControllerServiceChain, role_data]}

  ControllerNetworkDeploymentActionsValue:
    type: OS::Heat::Value
    properties:
      value:
        - if:
          - Controller_network_deployment_actions_exists
          - {get_param: ControllerNetworkDeploymentActions}
          - {get_param: NetworkDeploymentActions}

  ControllerConfigData:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        service_configs: {get_attr: [ControllerServiceConfigSettings, value]}
        service_names: {get_attr: [ControllerServiceNames, value]}
        role_extraconfig:
          map_merge:
            - tripleo::profile::base::metrics::collectd::sensubility::subscriptions: {get_attr: [ControllerServiceChainRoleData, value, monitoring_subscriptions]}
            - {get_param: controllerExtraConfig}
            - {get_param: ControllerExtraConfig}
        extraconfig: {get_param: ExtraConfig}
        hieradata_files:
          - '"%{::uuid}"'
          - fqdn
          - docker_puppet # Optionally provided by container-puppet.py
          - heat_config_%{::deploy_config_name}
          - config_step
          - role_extraconfig
          - extraconfig
          - pci_passthrough_whitelist
          - service_names
          - service_configs
          - cloud_domain
          - bootstrap_node # provided by tripleo-hieradata
          - all_nodes # provided by tripleo-hieradata
          - vip_data # provided by tripleo-hieradata
          - net_ip_map
          - '"%{::osfamily}"'
          # The following are required for compatibility with the Controller role
          # where some vendor integrations added hieradata via ExtraConfigPre
          - neutron_bigswitch_data # Optionally provided by Controller/ComputeExtraConfigPre
          # Special variable for upgrade
          - upgrade

  ControllerServiceConfigSettings:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          - get_param: GlobalConfigExtraMapData
          - get_attr: [ControllerServiceChainRoleData, value, config_settings]
          
          - get_attr: [ControllerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [NetworkerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ObjectStorageServiceChainRoleData, value, global_config_settings]
          
          # This next step combines two yaql passes:
          # - The inner one does a deep merge on the service_config_settings for all roles
          # - The outer one filters the map based on the services enabled for the role
          #   then merges the result into one map.
          - yaql:
              expression: let(root => $) -> $.data.map.items().where($[0] in coalesce($root.data.services, [])).select($[1]).reduce($1.mergeWith($2), {})
              data:
                map:
                  yaql:
                    expression: $.data.where($ != null).reduce($1.mergeWith($2), {})
                    data:
                    
                      - get_attr: [ControllerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [NetworkerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ObjectStorageServiceChainRoleData, value, service_config_settings]
                    
                services: {get_attr: [ControllerServiceNames, value]}

  # Filter any null/None service_names which may be present due to mapping
  # of services to OS::Heat::None
  ControllerServiceNames:
    type: OS::Heat::Value
    depends_on: ControllerServiceChain
    properties:
      type: comma_delimited_list
      value:
        yaql:
          expression: let(root => $) -> distinct($.data.extra_services.items().where($[0] in coalesce($root.data.enabled_services, [])).select($[1]).flatten() + coalesce($root.data.enabled_services, []))
          data:
            enabled_services: {get_attr: [ControllerServiceChainRoleData, value, service_names]}
            extra_services:
              # If anything other than keystone needs this
              # then we should add an extra_networks interface
              # to the service templates role_data but for
              # now we hard-code the keystone special case
              keystone:
                - keystone_admin_api
                - keystone_public_api

  ControllerIpListMap:
    type: OS::TripleO::Network::Ports::NetIpListMap
    properties:
      ControlPlaneIpList: {get_attr: [Controller, ip_address]}
      StorageIpList: {get_attr: [Controller, storage_ip_address]}
      StorageMgmtIpList: {get_attr: [Controller, storage_mgmt_ip_address]}
      InternalApiIpList: {get_attr: [Controller, internal_api_ip_address]}
      ExternalIpList: {get_attr: [Controller, external_ip_address]}
      RoleNetworks:
        - ctlplane
        - storage
        - storage_mgmt
        - internal_api
        - external
      EnabledServices: {get_attr: [ControllerServiceNames, value]}
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map_lower]}
      ServiceHostnameList: {get_attr: [Controller, hostname]}
      NetworkHostnameMap: {get_attr: [ControllerNetworkHostnameMap, value]}

  ControllerNetworkHostnameMap:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        # Note (shardy) this somewhat complex yaql may be replaced
        # with a map_deep_merge function in ocata.  It merges the
        # list of maps, but appends to colliding lists so we can
        # create a map of lists for all nodes for each network
        yaql:
          expression: dict($.data.where($ != null).flatten().selectMany($.items()).groupBy($[0], $[1]).select([$[0], $[1].flatten()]))
          data:
            - {get_attr: [Controller, hostname_map]}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  ControllerUserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeTimesyncUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart
      - config: {get_resource: ControllerRoleUserData}
        type: multipart

  # For optional operator role-specific userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  ControllerRoleUserData:
    type: OS::TripleO::Controller::NodeUserData

  Controller:
    type: OS::Heat::ResourceGroup
    depends_on: Networks
    update_policy:
      batch_create:
        max_batch_size: {get_param: NodeCreateBatchSize}
    properties:
      count: {get_param: ControllerCount}
      removal_policies: {get_param: ControllerRemovalPolicies}
      removal_policies_mode: {get_param: ControllerRemovalPoliciesMode}
      resource_def:
        type: OS::TripleO::Controller
        properties:
          CloudDomain: {get_param: CloudDomain}
          ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
          EndpointMap: {get_attr: [EndpointMapData, value]}
          Hostname:
            str_replace:
              template: {get_param: ControllerHostnameFormat}
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          # Note, SchedulerHints must be defined here, not only in the
          # nested template, as it can contain %index%
          ControllerSchedulerHints:
            map_merge:
              - {get_param: ControllerSchedulerHints}
          ServiceNames: {get_attr: [ControllerServiceNames, value]}
          ServiceMetadataSettings: {get_attr: [ControllerServiceChainRoleData, value, service_metadata_settings]}
          DeploymentServerBlacklistDict: {get_attr: [DeploymentServerBlacklistDict, value]}
          RoleParameters:
            map_merge:
              - {}
              - get_param: ControllerParameters
          UserData: {get_resource: ControllerUserData}
  # Resources generated for ComputeInstanceHA Role
  ComputeInstanceHAServiceChain:
    type: OS::TripleO::ComputeInstanceHAServices
    properties:
      Services:
        get_param: ComputeInstanceHAServices
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
      ServiceData:
        net_cidr_map: {get_attr: [NetCidrMapValue, value]}
        net_vip_map: {get_attr: [VipMap, net_ip_map]}
      EndpointMap: {get_attr: [EndpointMapData, value]}
      DefaultPasswords: {get_attr: [DefaultPasswords, passwords]}
      RoleName: ComputeInstanceHA
      RoleParameters:
        map_merge:
          - {'TunedProfileName': 'virtual-host'}
          - get_param: ComputeInstanceHAParameters

  # Lookup of role_data via heat outputs is slow, so workaround this by caching
  # the value in an OS::Heat::Value resource
  ComputeInstanceHAServiceChainRoleData:
    type: OS::Heat::Value
    properties:
      type: json
      value: {get_attr: [ComputeInstanceHAServiceChain, role_data]}

  ComputeInstanceHANetworkDeploymentActionsValue:
    type: OS::Heat::Value
    properties:
      value:
        - if:
          - ComputeInstanceHA_network_deployment_actions_exists
          - {get_param: ComputeInstanceHANetworkDeploymentActions}
          - {get_param: NetworkDeploymentActions}

  ComputeInstanceHAConfigData:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        service_configs: {get_attr: [ComputeInstanceHAServiceConfigSettings, value]}
        service_names: {get_attr: [ComputeInstanceHAServiceNames, value]}
        role_extraconfig:
          map_merge:
            - tripleo::profile::base::metrics::collectd::sensubility::subscriptions: {get_attr: [ComputeInstanceHAServiceChainRoleData, value, monitoring_subscriptions]}
            - {get_param: ComputeInstanceHAExtraConfig}
        extraconfig: {get_param: ExtraConfig}
        hieradata_files:
          - '"%{::uuid}"'
          - fqdn
          - docker_puppet # Optionally provided by container-puppet.py
          - heat_config_%{::deploy_config_name}
          - config_step
          - role_extraconfig
          - extraconfig
          - pci_passthrough_whitelist
          - service_names
          - service_configs
          - cloud_domain
          - bootstrap_node # provided by tripleo-hieradata
          - all_nodes # provided by tripleo-hieradata
          - vip_data # provided by tripleo-hieradata
          - net_ip_map
          - '"%{::osfamily}"'
          # The following are required for compatibility with the Controller role
          # where some vendor integrations added hieradata via ExtraConfigPre
          - neutron_bigswitch_data # Optionally provided by Controller/ComputeExtraConfigPre
          # Special variable for upgrade
          - upgrade

  ComputeInstanceHAServiceConfigSettings:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          - get_param: GlobalConfigExtraMapData
          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, config_settings]
          
          - get_attr: [ControllerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [NetworkerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ObjectStorageServiceChainRoleData, value, global_config_settings]
          
          # This next step combines two yaql passes:
          # - The inner one does a deep merge on the service_config_settings for all roles
          # - The outer one filters the map based on the services enabled for the role
          #   then merges the result into one map.
          - yaql:
              expression: let(root => $) -> $.data.map.items().where($[0] in coalesce($root.data.services, [])).select($[1]).reduce($1.mergeWith($2), {})
              data:
                map:
                  yaql:
                    expression: $.data.where($ != null).reduce($1.mergeWith($2), {})
                    data:
                    
                      - get_attr: [ControllerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [NetworkerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ObjectStorageServiceChainRoleData, value, service_config_settings]
                    
                services: {get_attr: [ComputeInstanceHAServiceNames, value]}

  # Filter any null/None service_names which may be present due to mapping
  # of services to OS::Heat::None
  ComputeInstanceHAServiceNames:
    type: OS::Heat::Value
    depends_on: ComputeInstanceHAServiceChain
    properties:
      type: comma_delimited_list
      value:
        yaql:
          expression: let(root => $) -> distinct($.data.extra_services.items().where($[0] in coalesce($root.data.enabled_services, [])).select($[1]).flatten() + coalesce($root.data.enabled_services, []))
          data:
            enabled_services: {get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_names]}
            extra_services:
              # If anything other than keystone needs this
              # then we should add an extra_networks interface
              # to the service templates role_data but for
              # now we hard-code the keystone special case
              keystone:
                - keystone_admin_api
                - keystone_public_api

  ComputeInstanceHAIpListMap:
    type: OS::TripleO::Network::Ports::NetIpListMap
    properties:
      ControlPlaneIpList: {get_attr: [ComputeInstanceHA, ip_address]}
      StorageIpList: {get_attr: [ComputeInstanceHA, storage_ip_address]}
      InternalApiIpList: {get_attr: [ComputeInstanceHA, internal_api_ip_address]}
      TenantIpList: {get_attr: [ComputeInstanceHA, tenant_ip_address]}
      ProviderNetworkIpList: {get_attr: [ComputeInstanceHA, provider_network_ip_address]}
      RoleNetworks:
        - ctlplane
        - storage
        - internal_api
        - tenant
        - provider_network
      EnabledServices: {get_attr: [ComputeInstanceHAServiceNames, value]}
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map_lower]}
      ServiceHostnameList: {get_attr: [ComputeInstanceHA, hostname]}
      NetworkHostnameMap: {get_attr: [ComputeInstanceHANetworkHostnameMap, value]}

  ComputeInstanceHANetworkHostnameMap:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        # Note (shardy) this somewhat complex yaql may be replaced
        # with a map_deep_merge function in ocata.  It merges the
        # list of maps, but appends to colliding lists so we can
        # create a map of lists for all nodes for each network
        yaql:
          expression: dict($.data.where($ != null).flatten().selectMany($.items()).groupBy($[0], $[1]).select([$[0], $[1].flatten()]))
          data:
            - {get_attr: [ComputeInstanceHA, hostname_map]}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  ComputeInstanceHAUserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeTimesyncUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart
      - config: {get_resource: ComputeInstanceHARoleUserData}
        type: multipart

  # For optional operator role-specific userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  ComputeInstanceHARoleUserData:
    type: OS::TripleO::ComputeInstanceHA::NodeUserData

  ComputeInstanceHA:
    type: OS::Heat::ResourceGroup
    depends_on: Networks
    update_policy:
      batch_create:
        max_batch_size: {get_param: NodeCreateBatchSize}
    properties:
      count: {get_param: ComputeInstanceHACount}
      removal_policies: {get_param: ComputeInstanceHARemovalPolicies}
      removal_policies_mode: {get_param: ComputeInstanceHARemovalPoliciesMode}
      resource_def:
        type: OS::TripleO::ComputeInstanceHA
        properties:
          CloudDomain: {get_param: CloudDomain}
          ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
          EndpointMap: {get_attr: [EndpointMapData, value]}
          Hostname:
            str_replace:
              template: {get_param: ComputeInstanceHAHostnameFormat}
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          # Note, SchedulerHints must be defined here, not only in the
          # nested template, as it can contain %index%
          ComputeInstanceHASchedulerHints:
            map_merge:
              - {get_param: ComputeInstanceHASchedulerHints}
          ServiceNames: {get_attr: [ComputeInstanceHAServiceNames, value]}
          ServiceMetadataSettings: {get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_metadata_settings]}
          DeploymentServerBlacklistDict: {get_attr: [DeploymentServerBlacklistDict, value]}
          RoleParameters:
            map_merge:
              - {'TunedProfileName': 'virtual-host'}
              - get_param: ComputeInstanceHAParameters
          UserData: {get_resource: ComputeInstanceHAUserData}
  # Resources generated for Networker Role
  NetworkerServiceChain:
    type: OS::TripleO::NetworkerServices
    properties:
      Services:
        get_param: NetworkerServices
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
      ServiceData:
        net_cidr_map: {get_attr: [NetCidrMapValue, value]}
        net_vip_map: {get_attr: [VipMap, net_ip_map]}
      EndpointMap: {get_attr: [EndpointMapData, value]}
      DefaultPasswords: {get_attr: [DefaultPasswords, passwords]}
      RoleName: Networker
      RoleParameters:
        map_merge:
          - {}
          - get_param: NetworkerParameters

  # Lookup of role_data via heat outputs is slow, so workaround this by caching
  # the value in an OS::Heat::Value resource
  NetworkerServiceChainRoleData:
    type: OS::Heat::Value
    properties:
      type: json
      value: {get_attr: [NetworkerServiceChain, role_data]}

  NetworkerNetworkDeploymentActionsValue:
    type: OS::Heat::Value
    properties:
      value:
        - if:
          - Networker_network_deployment_actions_exists
          - {get_param: NetworkerNetworkDeploymentActions}
          - {get_param: NetworkDeploymentActions}

  NetworkerConfigData:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        service_configs: {get_attr: [NetworkerServiceConfigSettings, value]}
        service_names: {get_attr: [NetworkerServiceNames, value]}
        role_extraconfig:
          map_merge:
            - tripleo::profile::base::metrics::collectd::sensubility::subscriptions: {get_attr: [NetworkerServiceChainRoleData, value, monitoring_subscriptions]}
            - {get_param: NetworkerExtraConfig}
        extraconfig: {get_param: ExtraConfig}
        hieradata_files:
          - '"%{::uuid}"'
          - fqdn
          - docker_puppet # Optionally provided by container-puppet.py
          - heat_config_%{::deploy_config_name}
          - config_step
          - role_extraconfig
          - extraconfig
          - pci_passthrough_whitelist
          - service_names
          - service_configs
          - cloud_domain
          - bootstrap_node # provided by tripleo-hieradata
          - all_nodes # provided by tripleo-hieradata
          - vip_data # provided by tripleo-hieradata
          - net_ip_map
          - '"%{::osfamily}"'
          # The following are required for compatibility with the Controller role
          # where some vendor integrations added hieradata via ExtraConfigPre
          - neutron_bigswitch_data # Optionally provided by Controller/ComputeExtraConfigPre
          # Special variable for upgrade
          - upgrade

  NetworkerServiceConfigSettings:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          - get_param: GlobalConfigExtraMapData
          - get_attr: [NetworkerServiceChainRoleData, value, config_settings]
          
          - get_attr: [ControllerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [NetworkerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ObjectStorageServiceChainRoleData, value, global_config_settings]
          
          # This next step combines two yaql passes:
          # - The inner one does a deep merge on the service_config_settings for all roles
          # - The outer one filters the map based on the services enabled for the role
          #   then merges the result into one map.
          - yaql:
              expression: let(root => $) -> $.data.map.items().where($[0] in coalesce($root.data.services, [])).select($[1]).reduce($1.mergeWith($2), {})
              data:
                map:
                  yaql:
                    expression: $.data.where($ != null).reduce($1.mergeWith($2), {})
                    data:
                    
                      - get_attr: [ControllerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [NetworkerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ObjectStorageServiceChainRoleData, value, service_config_settings]
                    
                services: {get_attr: [NetworkerServiceNames, value]}

  # Filter any null/None service_names which may be present due to mapping
  # of services to OS::Heat::None
  NetworkerServiceNames:
    type: OS::Heat::Value
    depends_on: NetworkerServiceChain
    properties:
      type: comma_delimited_list
      value:
        yaql:
          expression: let(root => $) -> distinct($.data.extra_services.items().where($[0] in coalesce($root.data.enabled_services, [])).select($[1]).flatten() + coalesce($root.data.enabled_services, []))
          data:
            enabled_services: {get_attr: [NetworkerServiceChainRoleData, value, service_names]}
            extra_services:
              # If anything other than keystone needs this
              # then we should add an extra_networks interface
              # to the service templates role_data but for
              # now we hard-code the keystone special case
              keystone:
                - keystone_admin_api
                - keystone_public_api

  NetworkerIpListMap:
    type: OS::TripleO::Network::Ports::NetIpListMap
    properties:
      ControlPlaneIpList: {get_attr: [Networker, ip_address]}
      InternalApiIpList: {get_attr: [Networker, internal_api_ip_address]}
      TenantIpList: {get_attr: [Networker, tenant_ip_address]}
      ProviderNetworkIpList: {get_attr: [Networker, provider_network_ip_address]}
      RoleNetworks:
        - ctlplane
        - internal_api
        - tenant
        - provider_network
      EnabledServices: {get_attr: [NetworkerServiceNames, value]}
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map_lower]}
      ServiceHostnameList: {get_attr: [Networker, hostname]}
      NetworkHostnameMap: {get_attr: [NetworkerNetworkHostnameMap, value]}

  NetworkerNetworkHostnameMap:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        # Note (shardy) this somewhat complex yaql may be replaced
        # with a map_deep_merge function in ocata.  It merges the
        # list of maps, but appends to colliding lists so we can
        # create a map of lists for all nodes for each network
        yaql:
          expression: dict($.data.where($ != null).flatten().selectMany($.items()).groupBy($[0], $[1]).select([$[0], $[1].flatten()]))
          data:
            - {get_attr: [Networker, hostname_map]}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  NetworkerUserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeTimesyncUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart
      - config: {get_resource: NetworkerRoleUserData}
        type: multipart

  # For optional operator role-specific userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NetworkerRoleUserData:
    type: OS::TripleO::Networker::NodeUserData

  Networker:
    type: OS::Heat::ResourceGroup
    depends_on: Networks
    update_policy:
      batch_create:
        max_batch_size: {get_param: NodeCreateBatchSize}
    properties:
      count: {get_param: NetworkerCount}
      removal_policies: {get_param: NetworkerRemovalPolicies}
      removal_policies_mode: {get_param: NetworkerRemovalPoliciesMode}
      resource_def:
        type: OS::TripleO::Networker
        properties:
          CloudDomain: {get_param: CloudDomain}
          ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
          EndpointMap: {get_attr: [EndpointMapData, value]}
          Hostname:
            str_replace:
              template: {get_param: NetworkerHostnameFormat}
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          # Note, SchedulerHints must be defined here, not only in the
          # nested template, as it can contain %index%
          NetworkerSchedulerHints:
            map_merge:
              - {get_param: NetworkerSchedulerHints}
          ServiceNames: {get_attr: [NetworkerServiceNames, value]}
          ServiceMetadataSettings: {get_attr: [NetworkerServiceChainRoleData, value, service_metadata_settings]}
          DeploymentServerBlacklistDict: {get_attr: [DeploymentServerBlacklistDict, value]}
          RoleParameters:
            map_merge:
              - {}
              - get_param: NetworkerParameters
          UserData: {get_resource: NetworkerUserData}
  # Resources generated for ObjectStorage Role
  ObjectStorageServiceChain:
    type: OS::TripleO::ObjectStorageServices
    properties:
      Services:
        get_param: ObjectStorageServices
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
      ServiceData:
        net_cidr_map: {get_attr: [NetCidrMapValue, value]}
        net_vip_map: {get_attr: [VipMap, net_ip_map]}
      EndpointMap: {get_attr: [EndpointMapData, value]}
      DefaultPasswords: {get_attr: [DefaultPasswords, passwords]}
      RoleName: ObjectStorage
      RoleParameters:
        map_merge:
          - {}
          - get_param: ObjectStorageParameters

  # Lookup of role_data via heat outputs is slow, so workaround this by caching
  # the value in an OS::Heat::Value resource
  ObjectStorageServiceChainRoleData:
    type: OS::Heat::Value
    properties:
      type: json
      value: {get_attr: [ObjectStorageServiceChain, role_data]}

  ObjectStorageNetworkDeploymentActionsValue:
    type: OS::Heat::Value
    properties:
      value:
        - if:
          - ObjectStorage_network_deployment_actions_exists
          - {get_param: ObjectStorageNetworkDeploymentActions}
          - {get_param: NetworkDeploymentActions}

  ObjectStorageConfigData:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        service_configs: {get_attr: [ObjectStorageServiceConfigSettings, value]}
        service_names: {get_attr: [ObjectStorageServiceNames, value]}
        role_extraconfig:
          map_merge:
            - tripleo::profile::base::metrics::collectd::sensubility::subscriptions: {get_attr: [ObjectStorageServiceChainRoleData, value, monitoring_subscriptions]}
            - {get_param: ObjectStorageExtraConfig}
        extraconfig: {get_param: ExtraConfig}
        hieradata_files:
          - '"%{::uuid}"'
          - fqdn
          - docker_puppet # Optionally provided by container-puppet.py
          - heat_config_%{::deploy_config_name}
          - config_step
          - role_extraconfig
          - extraconfig
          - pci_passthrough_whitelist
          - service_names
          - service_configs
          - cloud_domain
          - bootstrap_node # provided by tripleo-hieradata
          - all_nodes # provided by tripleo-hieradata
          - vip_data # provided by tripleo-hieradata
          - net_ip_map
          - '"%{::osfamily}"'
          # The following are required for compatibility with the Controller role
          # where some vendor integrations added hieradata via ExtraConfigPre
          - neutron_bigswitch_data # Optionally provided by Controller/ComputeExtraConfigPre
          # Special variable for upgrade
          - upgrade

  ObjectStorageServiceConfigSettings:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          - get_param: GlobalConfigExtraMapData
          - get_attr: [ObjectStorageServiceChainRoleData, value, config_settings]
          
          - get_attr: [ControllerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [NetworkerServiceChainRoleData, value, global_config_settings]
          
          - get_attr: [ObjectStorageServiceChainRoleData, value, global_config_settings]
          
          # This next step combines two yaql passes:
          # - The inner one does a deep merge on the service_config_settings for all roles
          # - The outer one filters the map based on the services enabled for the role
          #   then merges the result into one map.
          - yaql:
              expression: let(root => $) -> $.data.map.items().where($[0] in coalesce($root.data.services, [])).select($[1]).reduce($1.mergeWith($2), {})
              data:
                map:
                  yaql:
                    expression: $.data.where($ != null).reduce($1.mergeWith($2), {})
                    data:
                    
                      - get_attr: [ControllerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [NetworkerServiceChainRoleData, value, service_config_settings]
                    
                      - get_attr: [ObjectStorageServiceChainRoleData, value, service_config_settings]
                    
                services: {get_attr: [ObjectStorageServiceNames, value]}

  # Filter any null/None service_names which may be present due to mapping
  # of services to OS::Heat::None
  ObjectStorageServiceNames:
    type: OS::Heat::Value
    depends_on: ObjectStorageServiceChain
    properties:
      type: comma_delimited_list
      value:
        yaql:
          expression: let(root => $) -> distinct($.data.extra_services.items().where($[0] in coalesce($root.data.enabled_services, [])).select($[1]).flatten() + coalesce($root.data.enabled_services, []))
          data:
            enabled_services: {get_attr: [ObjectStorageServiceChainRoleData, value, service_names]}
            extra_services:
              # If anything other than keystone needs this
              # then we should add an extra_networks interface
              # to the service templates role_data but for
              # now we hard-code the keystone special case
              keystone:
                - keystone_admin_api
                - keystone_public_api

  ObjectStorageIpListMap:
    type: OS::TripleO::Network::Ports::NetIpListMap
    properties:
      ControlPlaneIpList: {get_attr: [ObjectStorage, ip_address]}
      StorageIpList: {get_attr: [ObjectStorage, storage_ip_address]}
      StorageMgmtIpList: {get_attr: [ObjectStorage, storage_mgmt_ip_address]}
      InternalApiIpList: {get_attr: [ObjectStorage, internal_api_ip_address]}
      RoleNetworks:
        - ctlplane
        - storage
        - storage_mgmt
        - internal_api
      EnabledServices: {get_attr: [ObjectStorageServiceNames, value]}
      ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map_lower]}
      ServiceHostnameList: {get_attr: [ObjectStorage, hostname]}
      NetworkHostnameMap: {get_attr: [ObjectStorageNetworkHostnameMap, value]}

  ObjectStorageNetworkHostnameMap:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        # Note (shardy) this somewhat complex yaql may be replaced
        # with a map_deep_merge function in ocata.  It merges the
        # list of maps, but appends to colliding lists so we can
        # create a map of lists for all nodes for each network
        yaql:
          expression: dict($.data.where($ != null).flatten().selectMany($.items()).groupBy($[0], $[1]).select([$[0], $[1].flatten()]))
          data:
            - {get_attr: [ObjectStorage, hostname_map]}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  ObjectStorageUserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeTimesyncUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart
      - config: {get_resource: ObjectStorageRoleUserData}
        type: multipart

  # For optional operator role-specific userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  ObjectStorageRoleUserData:
    type: OS::TripleO::ObjectStorage::NodeUserData

  ObjectStorage:
    type: OS::Heat::ResourceGroup
    depends_on: Networks
    update_policy:
      batch_create:
        max_batch_size: {get_param: NodeCreateBatchSize}
    properties:
      count: {get_param: ObjectStorageCount}
      removal_policies: {get_param: ObjectStorageRemovalPolicies}
      removal_policies_mode: {get_param: ObjectStorageRemovalPoliciesMode}
      resource_def:
        type: OS::TripleO::ObjectStorage
        properties:
          CloudDomain: {get_param: CloudDomain}
          ServiceNetMap: {get_attr: [ServiceNetMap, service_net_map]}
          EndpointMap: {get_attr: [EndpointMapData, value]}
          Hostname:
            str_replace:
              template: {get_param: ObjectStorageHostnameFormat}
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
          NodeIndex: '%index%'
          # Note, SchedulerHints must be defined here, not only in the
          # nested template, as it can contain %index%
          ObjectStorageSchedulerHints:
            map_merge:
              - {get_param: ObjectStorageSchedulerHints}
          ServiceNames: {get_attr: [ObjectStorageServiceNames, value]}
          ServiceMetadataSettings: {get_attr: [ObjectStorageServiceChainRoleData, value, service_metadata_settings]}
          DeploymentServerBlacklistDict: {get_attr: [DeploymentServerBlacklistDict, value]}
          RoleParameters:
            map_merge:
              - {}
              - get_param: ObjectStorageParameters
          UserData: {get_resource: ObjectStorageUserData}
  ControllerServers:
    type: OS::Heat::Value
    depends_on: Controller
    properties:
      type: json
      value:
        yaql:
          expression: let(servers=>switch(isDict($.data.servers) => $.data.servers, true => {})) -> $servers.deleteAll($servers.keys().where($servers[$] = null))
          data:
            servers: {get_attr: [Controller, attributes, nova_server_resource]}
  ComputeInstanceHAServers:
    type: OS::Heat::Value
    depends_on: ComputeInstanceHA
    properties:
      type: json
      value:
        yaql:
          expression: let(servers=>switch(isDict($.data.servers) => $.data.servers, true => {})) -> $servers.deleteAll($servers.keys().where($servers[$] = null))
          data:
            servers: {get_attr: [ComputeInstanceHA, attributes, nova_server_resource]}
  NetworkerServers:
    type: OS::Heat::Value
    depends_on: Networker
    properties:
      type: json
      value:
        yaql:
          expression: let(servers=>switch(isDict($.data.servers) => $.data.servers, true => {})) -> $servers.deleteAll($servers.keys().where($servers[$] = null))
          data:
            servers: {get_attr: [Networker, attributes, nova_server_resource]}
  ObjectStorageServers:
    type: OS::Heat::Value
    depends_on: ObjectStorage
    properties:
      type: json
      value:
        yaql:
          expression: let(servers=>switch(isDict($.data.servers) => $.data.servers, true => {})) -> $servers.deleteAll($servers.keys().where($servers[$] = null))
          data:
            servers: {get_attr: [ObjectStorage, attributes, nova_server_resource]}

  # This is a different format to *Servers, as it creates a map of lists
  # whereas *Servers creates a map of maps with keys of the nested resource names
  ServerIdMap:
    type: OS::Heat::Value
    properties:
      value:
        server_ids:
          Controller: {get_attr: [Controller, nova_server_resource]}
          ComputeInstanceHA: {get_attr: [ComputeInstanceHA, nova_server_resource]}
          Networker: {get_attr: [Networker, nova_server_resource]}
          ObjectStorage: {get_attr: [ObjectStorage, nova_server_resource]}
        bootstrap_server_id:
          yaql:
            expression: coalesce($.data, []).first(null)
            data: {get_attr: [Controller, nova_server_resource]}

  # This resource just creates a dict out of the DeploymentServerBlacklist,
  # which is a list. The dict is used in the role templates to set a condition
  # on whether to create the deployment resources. We can't use the list
  # directly because there is no way to ask Heat if a list contains a specific
  # value.
  DeploymentServerBlacklistDict:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
          repeat:
            template:
              hostname: 1
            for_each:
              hostname: {get_param: DeploymentServerBlacklist}

  # Single value comma delimited lists may be stored in strings
  # that fails lists concat. Make them always lists (nested are OK)
  HostsValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        entries:
            - - {get_param: UndercloudHostsEntries}
            - - if:
                - add_vips_to_etc_hosts
                - {get_attr: [VipHosts, value, entries]}
                - []
            - {get_attr: [Controller, hosts_entry, entries]}
            - {get_attr: [ComputeInstanceHA, hosts_entry, entries]}
            - {get_attr: [Networker, hosts_entry, entries]}
            - {get_attr: [ObjectStorage, hosts_entry, entries]}
            - - {get_param: ExtraHostFileEntries}

  HostsEntryValue:
    type: OS::Heat::Value
    properties:
      value:
        yaql:
          expression: coalesce($.data, []).where($ != null).where($ != []).flatten().distinct()
          data: {get_attr: [HostsValue, value, entries]}

  CloudNames:
    type: OS::Heat::Value
    properties:
      value:
        cloud_name_storage: {get_param: CloudNameStorage}
        # Special case StorageMgmt hostname param, which is CloudNameStorageManagement
        cloud_name_storage_mgmt: {get_param: CloudNameStorageManagement}
        # Special case the Internal API hostname param, which is CloudNameInternal
        cloud_name_internal_api: {get_param: CloudNameInternal}
        # Special case the External hostname param, which is CloudName
        cloud_name_external: {get_param: CloudName}
        cloud_name_ctlplane: {get_param: CloudNameCtlplane}

  GlobalConfig:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:

          - get_attr: [ControllerServiceChainRoleData, value, global_config_settings]

          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, global_config_settings]

          - get_attr: [NetworkerServiceChainRoleData, value, global_config_settings]

          - get_attr: [ObjectStorageServiceChainRoleData, value, global_config_settings]


  MysqlRootPassword:
    type: OS::TripleO::RandomString
    properties:
      length: 10

  RabbitCookie:
    type: OS::TripleO::RandomString
    properties:
      length: 20
      salt: {get_param: RabbitCookieSalt}

  DefaultPasswords:
    type: OS::TripleO::DefaultPasswords
    properties:
      DefaultMysqlRootPassword: {get_attr: [MysqlRootPassword, value]}
      DefaultRabbitCookie: {get_attr: [RabbitCookie, value]}
      DefaultHeatAuthEncryptionKey: {get_attr: [HeatAuthEncryptionKey, value]}
      DefaultPcsdPassword: {get_attr: [PcsdPassword, value]}
      DefaultHorizonSecret: {get_attr: [HorizonSecret, value]}

  # creates the network architecture
  Networks:
    type: OS::TripleO::Network
    properties:
      CtlplaneNetworkCidrs: {get_attr: [ControlVirtualIP, network, tags]}
  ControllerGroupVars:
    type: OS::Heat::Value
    properties:
      value:
        ctlplane_subnet_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data:
              if:
              - ctlplane_subnet_cidr_set
              - [{get_param: ControlPlaneSubnetCidr}]
              - {get_attr: [ControlVirtualIP, network, tags]}
        network_cidrs:
          Storage_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, storage]}
          StorageMgmt_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, storage_mgmt]}
          InternalApi_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, internal_api]}
          External_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, external]}
        role_networks:
          - Storage
        
        
          - StorageMgmt
        
        
          - InternalApi
        
        
        
          - External
        
        
        
        
        storage_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, storage]}
        
        
        storage_mgmt_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, storage_mgmt]}
        
        
        internal_api_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, internal_api]}
        
        
        
        external_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, external]}
        
        
        
        
        service_metadata_settings: {get_attr: [ControllerServiceChainRoleData, value, service_metadata_settings]}


  ComputeInstanceHAGroupVars:
    type: OS::Heat::Value
    properties:
      value:
        ctlplane_subnet_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data:
              if:
              - ctlplane_subnet_cidr_set
              - [{get_param: ControlPlaneSubnetCidr}]
              - {get_attr: [ControlVirtualIP, network, tags]}
        network_cidrs:
          Storage_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, storage]}
          InternalApi_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, internal_api]}
          Tenant_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, tenant]}
          ProviderNetwork_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, provider_network]}
        role_networks:
          - Storage
        
        
        
          - InternalApi
        
        
          - Tenant
        
        
        
        
          - ProviderNetwork
        
        
        storage_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, storage]}
        
        
        
        internal_api_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, internal_api]}
        
        
        tenant_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, tenant]}
        
        
        
        
        provider_network_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, provider_network]}
        
        
        service_metadata_settings: {get_attr: [ComputeInstanceHAServiceChainRoleData, value, service_metadata_settings]}


  NetworkerGroupVars:
    type: OS::Heat::Value
    properties:
      value:
        ctlplane_subnet_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data:
              if:
              - ctlplane_subnet_cidr_set
              - [{get_param: ControlPlaneSubnetCidr}]
              - {get_attr: [ControlVirtualIP, network, tags]}
        network_cidrs:
          InternalApi_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, internal_api]}
          Tenant_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, tenant]}
          ProviderNetwork_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, provider_network]}
        role_networks:
        
        
          - InternalApi
        
        
          - Tenant
        
        
        
        
          - ProviderNetwork
        
        
        
        
        internal_api_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, internal_api]}
        
        
        tenant_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, tenant]}
        
        
        
        
        provider_network_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, provider_network]}
        
        
        service_metadata_settings: {get_attr: [NetworkerServiceChainRoleData, value, service_metadata_settings]}


  ObjectStorageGroupVars:
    type: OS::Heat::Value
    properties:
      value:
        ctlplane_subnet_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data:
              if:
              - ctlplane_subnet_cidr_set
              - [{get_param: ControlPlaneSubnetCidr}]
              - {get_attr: [ControlVirtualIP, network, tags]}
        network_cidrs:
          Storage_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, storage]}
          StorageMgmt_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, storage_mgmt]}
          InternalApi_cidr:
            yaql:
              expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
              data: {get_attr: [Networks, net_cidr_map, internal_api]}
        role_networks:
          - Storage
        
        
          - StorageMgmt
        
        
          - InternalApi
        
        
        
        
        
        
        storage_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, storage]}
        
        
        storage_mgmt_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, storage_mgmt]}
        
        
        internal_api_cidr:
          yaql:
            expression: coalesce($.data, []).where(not isEmpty($)).first().split('/')[-1]
            data: {get_attr: [Networks, net_cidr_map, internal_api]}
        
        
        
        
        
        
        service_metadata_settings: {get_attr: [ObjectStorageServiceChainRoleData, value, service_metadata_settings]}



  ControlVirtualIP:
    depends_on: ServiceNetMap
    type: OS::TripleO::Network::Ports::ControlPlaneVipPort
    properties:
      name: control_virtual_ip
      network: {get_param: NeutronControlPlaneID}
      fixed_ips:
        if:
        - control_fixed_ip_not_set
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, ctlplane]}}]
        - get_param: ControlFixedIPs
      replacement_policy: AUTO

  RedisVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::RedisVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      ControlPlaneNetwork: {get_param: NeutronControlPlaneID}
      PortName: redis_virtual_ip
      NetworkName: {get_attr: [ServiceNetMap, service_net_map, RedisNetwork]}
      ServiceName: redis
      FixedIPs:
        if:
        - redis_virtual_fixed_ip_set
        - {get_param: RedisVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, redis]}}]

  OVNDBsVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::OVNDBsVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      ControlPlaneNetwork: {get_param: NeutronControlPlaneID}
      PortName: ovn_dbs_virtual_ip
      NetworkName: {get_attr: [ServiceNetMap, service_net_map, OvnDbsNetwork]}
      ServiceName: ovn_dbs
      FixedIPs:
        if:
        - ovn_dbs_virtual_fixed_ip_set
        - {get_param: OVNDBsVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, ovn_dbs]}}]
  StorageVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::StorageVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      PortName: storage_virtual_ip
      FixedIPs:
        if:
        - storage_virtual_fixed_ip_set
        - {get_param: StorageVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, Storage]}}]
  
  StorageMgmtVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::StorageMgmtVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      PortName: storage_mgmt_virtual_ip
      FixedIPs:
        if:
        - storage_mgmt_virtual_fixed_ip_set
        - {get_param: StorageMgmtVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, StorageMgmt]}}]
  
  InternalApiVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::InternalApiVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      PortName: internal_api_virtual_ip
      FixedIPs:
        if:
        - internal_api_virtual_fixed_ip_set
        - {get_param: InternalApiVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, InternalApi]}}]
  
  # The public VIP is on the External net, falls back to ctlplane
  PublicVirtualIP:
    depends_on: [Networks, ServiceNetMap]
    type: OS::TripleO::Network::Ports::ExternalVipPort
    properties:
      ControlPlaneIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      ControlPlaneNetwork: {get_param: NeutronControlPlaneID}
      PortName: public_virtual_ip
      FixedIPs:
        if:
        - public_virtual_fixed_ip_set
        - {get_param: PublicVirtualFixedIPs}
        - [{subnet: {get_attr: [ServiceNetMap, vip_subnet_map, External]}}]

  VipMap:
    type: OS::TripleO::Network::Ports::NetVipMap
    properties:
      ControlPlaneIp: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      ControlPlaneSubnetCidr:
        if:
          - ctlplane_subnet_cidr_set
          - {get_param: ControlPlaneSubnetCidr}
          - {str_split: ['/', {get_attr: [ControlVirtualIP, subnets, 0, cidr]}, 1]}
      StorageIp: {get_attr: [StorageVirtualIP, ip_address]}
      StorageIpUri: {get_attr: [StorageVirtualIP, ip_address_uri]}
      StorageMgmtIp: {get_attr: [StorageMgmtVirtualIP, ip_address]}
      StorageMgmtIpUri: {get_attr: [StorageMgmtVirtualIP, ip_address_uri]}
      InternalApiIp: {get_attr: [InternalApiVirtualIP, ip_address]}
      InternalApiIpUri: {get_attr: [InternalApiVirtualIP, ip_address_uri]}
      ExternalIp: {get_attr: [PublicVirtualIP, ip_address]}
      ExternalIpUri: {get_attr: [PublicVirtualIP, ip_address_uri]}
      # No tenant or management VIP required
    # Because of nested get_attr functions in the KeystoneAdminVip output, we
    # can't determine which attributes of VipMap are used until after
    # ServiceNetMap's attribute values are available.
    depends_on: ServiceNetMap

  # Optional ExtraConfig for all nodes - all roles are passed in here, but
  # the nested template may configure each role differently (or not at all)
  AllNodesExtraConfig:
    type: OS::TripleO::AllNodesExtraConfig
    properties:
      servers:
        Controller: {get_attr: [ControllerServers, value]}
        ComputeInstanceHA: {get_attr: [ComputeInstanceHAServers, value]}
        Networker: {get_attr: [NetworkerServers, value]}
        ObjectStorage: {get_attr: [ObjectStorageServers, value]}

  BlacklistedIpAddresses:
    type: OS::Heat::Value
    properties:
      value:
        list_concat:
          - {get_attr: [Controller, blacklist_ip_address]}
          - {get_attr: [ComputeInstanceHA, blacklist_ip_address]}
          - {get_attr: [Networker, blacklist_ip_address]}
          - {get_attr: [ObjectStorage, blacklist_ip_address]}

  AnsibleHostVars:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        Controller:
          map_merge:
            list_concat:
            - {get_attr: [Controller, ansible_host_vars_map]}
        ComputeInstanceHA:
          map_merge:
            list_concat:
            - {get_attr: [ComputeInstanceHA, ansible_host_vars_map]}
        Networker:
          map_merge:
            list_concat:
            - {get_attr: [Networker, ansible_host_vars_map]}
        ObjectStorage:
          map_merge:
            list_concat:
            - {get_attr: [ObjectStorage, ansible_host_vars_map]}

  BlacklistedHostnames:
    type: OS::Heat::Value
    properties:
      value:
        list_concat:
          - {get_attr: [Controller, blacklist_hostname]}
          - {get_attr: [ComputeInstanceHA, blacklist_hostname]}
          - {get_attr: [Networker, blacklist_hostname]}
          - {get_attr: [ObjectStorage, blacklist_hostname]}

  # Post deployment steps for all roles
  AllNodesDeploySteps:
    type: OS::TripleO::PostDeploySteps
    depends_on:
      - AllNodesExtraConfig
    properties:
      servers:
        Controller: {get_attr: [ControllerServers, value]}
        ComputeInstanceHA: {get_attr: [ComputeInstanceHAServers, value]}
        Networker: {get_attr: [NetworkerServers, value]}
        ObjectStorage: {get_attr: [ObjectStorageServers, value]}
      EndpointMap: {get_attr: [EndpointMapData, value]}
      role_data:
        Controller: {get_attr: [ControllerServiceChainRoleData, value]}
        ComputeInstanceHA: {get_attr: [ComputeInstanceHAServiceChainRoleData, value]}
        Networker: {get_attr: [NetworkerServiceChainRoleData, value]}
        ObjectStorage: {get_attr: [ObjectStorageServiceChainRoleData, value]}
      ControllerCount: {get_param: ControllerCount}
      ComputeInstanceHACount: {get_param: ComputeInstanceHACount}
      NetworkerCount: {get_param: NetworkerCount}
      ObjectStorageCount: {get_param: ObjectStorageCount}
      ServiceNetMapLower: {get_attr: [ServiceNetMap, service_net_map_lower]}
      PingTestIpsMap:
        Controller:
          list_join:
          - ' '
          - - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Controller, ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Controller, storage_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Controller, storage_mgmt_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Controller, internal_api_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Controller, external_ip_address]}
        ComputeInstanceHA:
          list_join:
          - ' '
          - - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ComputeInstanceHA, ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ComputeInstanceHA, storage_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ComputeInstanceHA, internal_api_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ComputeInstanceHA, tenant_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ComputeInstanceHA, provider_network_ip_address]}
        Networker:
          list_join:
          - ' '
          - - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Networker, ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Networker, internal_api_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Networker, tenant_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [Networker, provider_network_ip_address]}
        ObjectStorage:
          list_join:
          - ' '
          - - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ObjectStorage, ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ObjectStorage, storage_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ObjectStorage, storage_mgmt_ip_address]}
            - yaql:
                expression: coalesce($.data, []).first(null)
                data: {get_attr: [ObjectStorage, internal_api_ip_address]}
      HostsEntry: {get_attr: [HostsEntryValue, value]}
      EnabledServices:
        list_concat:
          - {get_attr: [ControllerServiceNames, value]}
          - {get_attr: [ComputeInstanceHAServiceNames, value]}
          - {get_attr: [NetworkerServiceNames, value]}
          - {get_attr: [ObjectStorageServiceNames, value]}
      ControlVirtualIP: {get_attr: [ControlVirtualIP, fixed_ips, 0, ip_address]}
      EnabledNetworks:
        - Storage
        - StorageMgmt
        - InternalApi
        - Tenant
        - External
        - Management
        - ProviderNetwork
      NetVipMap:
        map_merge:
          - {get_attr: [VipMap, net_ip_map]}
          - redis: {get_attr: [RedisVirtualIP, ip_address]}
          - ovn_dbs: {get_attr: [OVNDBsVirtualIP, ip_address]}
      CloudNames: {get_attr: [CloudNames, value]}
      UndercloudHostsEntries: {get_param: UndercloudHostsEntries}
      ExtraHostsEntries: {get_param: ExtraHostFileEntries}
      VipHostsEntries:
        if:
          - add_vips_to_etc_hosts
          - {get_attr: [VipHosts, value, entries]}
          - []
      KeystoneResourcesConfigs:
        map_merge:

          - get_attr: [ControllerServiceChainRoleData, value, keystone_resources]

          - get_attr: [ComputeInstanceHAServiceChainRoleData, value, keystone_resources]

          - get_attr: [NetworkerServiceChainRoleData, value, keystone_resources]

          - get_attr: [ObjectStorageServiceChainRoleData, value, keystone_resources]


outputs:
  ManagedEndpoints:
    description: Asserts that the keystone endpoints have been provisioned.
    value: true
  KeystoneURL:
    description: URL for the Overcloud Keystone service
    value: {get_attr: [EndpointMapData, value, KeystonePublic, uri_no_suffix]}
  KeystoneAdminVip:
    description: Keystone Admin VIP endpoint
    # Note that these nested get_attr functions require a dependency
    # relationship between VipMap and ServiceNetMap, since we can't determine
    # which attributes of VipMap are used until after ServiceNetMap's attribute
    # values are available. If this is ever reworked to not use nested
    # get_attr, that dependency can be removed.
    value: {get_attr: [VipMap, net_ip_map, {get_attr: [ServiceNetMap, service_net_map, KeystoneAdminApiNetwork]}]}
  EndpointMap:
    description: |
      Mapping of the resources with the needed info for their endpoints.
      This includes the protocol used, the IP, port and also a full
      representation of the URI.
    value: {get_attr: [EndpointMapData, value]}
  HostsEntry:
    description: |
      The content that should be appended to your /etc/hosts if you want to get
      hostname-based access to the deployed nodes (useful for testing without
      setting up a DNS).
    value:
      list_concat_unique:
        - {get_attr: [HostsEntryValue, value]}
        - {get_attr: [VipHosts, value, entries]}
  EnabledServices:
    description: The services enabled on each role
    value:
      Controller: {get_attr: [ControllerServiceNames, value]}
      ComputeInstanceHA: {get_attr: [ComputeInstanceHAServiceNames, value]}
      Networker: {get_attr: [NetworkerServiceNames, value]}
      ObjectStorage: {get_attr: [ObjectStorageServiceNames, value]}
  RoleData:
    description: The configuration data associated with each role
    value:
      Controller: {get_attr: [ControllerServiceChainRoleData, value]}
      ComputeInstanceHA: {get_attr: [ComputeInstanceHAServiceChainRoleData, value]}
      Networker: {get_attr: [NetworkerServiceChainRoleData, value]}
      ObjectStorage: {get_attr: [ObjectStorageServiceChainRoleData, value]}
  RoleConfig:
    description: The configuration workflows associated with each role
    value: {get_attr: [AllNodesDeploySteps, RoleConfig]}
  RoleNetIpMap:
    description: Mapping of each network to a list of IPs for each role
    value:
      Controller: {get_attr: [ControllerIpListMap, net_ip_map]}
      ComputeInstanceHA: {get_attr: [ComputeInstanceHAIpListMap, net_ip_map]}
      Networker: {get_attr: [NetworkerIpListMap, net_ip_map]}
      ObjectStorage: {get_attr: [ObjectStorageIpListMap, net_ip_map]}
  RoleGroupVars:
    description: Mapping of roles to ansible group_vars to be applied config in those roles
    value:
      Controller:
        map_merge:
        - {get_attr: [ControllerGroupVars, value]}
        - {get_attr: [ControllerConfigData, value]}
        - any_errors_fatal: {get_param: ControllerAnyErrorsFatal}
          max_fail_percentage: {get_param: ControllerMaxFailPercentage}
          neutron_physical_bridge_name: {get_param: NeutronPhysicalBridge}
          neutron_public_interface_name: {get_param: NeutronPublicInterface}
          network_deployment_actions: {get_attr: [ControllerNetworkDeploymentActionsValue, value]}
      ComputeInstanceHA:
        map_merge:
        - {get_attr: [ComputeInstanceHAGroupVars, value]}
        - {get_attr: [ComputeInstanceHAConfigData, value]}
        - any_errors_fatal: {get_param: ComputeInstanceHAAnyErrorsFatal}
          max_fail_percentage: {get_param: ComputeInstanceHAMaxFailPercentage}
          neutron_physical_bridge_name: {get_param: NeutronPhysicalBridge}
          neutron_public_interface_name: {get_param: NeutronPublicInterface}
          network_deployment_actions: {get_attr: [ComputeInstanceHANetworkDeploymentActionsValue, value]}
      Networker:
        map_merge:
        - {get_attr: [NetworkerGroupVars, value]}
        - {get_attr: [NetworkerConfigData, value]}
        - any_errors_fatal: {get_param: NetworkerAnyErrorsFatal}
          max_fail_percentage: {get_param: NetworkerMaxFailPercentage}
          neutron_physical_bridge_name: {get_param: NeutronPhysicalBridge}
          neutron_public_interface_name: {get_param: NeutronPublicInterface}
          network_deployment_actions: {get_attr: [NetworkerNetworkDeploymentActionsValue, value]}
      ObjectStorage:
        map_merge:
        - {get_attr: [ObjectStorageGroupVars, value]}
        - {get_attr: [ObjectStorageConfigData, value]}
        - any_errors_fatal: {get_param: ObjectStorageAnyErrorsFatal}
          max_fail_percentage: {get_param: ObjectStorageMaxFailPercentage}
          neutron_physical_bridge_name: {get_param: NeutronPhysicalBridge}
          neutron_public_interface_name: {get_param: NeutronPublicInterface}
          network_deployment_actions: {get_attr: [ObjectStorageNetworkDeploymentActionsValue, value]}
  RoleNetHostnameMap:
    description: Mapping of each network to a list of hostnames for each role
    value:
      Controller: {get_attr: [ControllerNetworkHostnameMap, value]}
      ComputeInstanceHA: {get_attr: [ComputeInstanceHANetworkHostnameMap, value]}
      Networker: {get_attr: [NetworkerNetworkHostnameMap, value]}
      ObjectStorage: {get_attr: [ObjectStorageNetworkHostnameMap, value]}
  RoleTags:
    description: Tags for each role, as defined in roles_data.yaml
    value:
      Controller: ['primary', 'controller']
      ComputeInstanceHA: []
      Networker: ['external_bridge']
      ObjectStorage: []
  VipMap:
    description: Mapping of each network to VIP addresses. Also includes the Redis and OVN DBs VIPs.
    value:
      map_merge:
        - {get_attr: [VipMap, net_ip_map]}
        - redis: {get_attr: [RedisVirtualIP, ip_address]}
        - ovn_dbs: {get_attr: [OVNDBsVirtualIP, ip_address]}
  ServerIdData:
    description: Mapping of each role to a list of nova server IDs and the bootstrap ID
    value: {get_attr: [ServerIdMap, value]}
  BlacklistedHostnames:
    description: List of blacklisted hostnames
    value: {get_attr: [BlacklistedHostnames, value]}
  BlacklistedIpAddresses:
    description: List of blacklisted ctlplane IP addresses
    value: {get_attr: [BlacklistedIpAddresses, value]}
  GlobalConfig:
    description: The global_config (hieradata).
    value: {get_attr: [GlobalConfig, value]}
  HostnameNetworkConfigMap:
    description: Mapping of hostname to NetworkConfig resource
    value:
      map_merge:
        list_concat:
          - {get_attr: [Controller, hostname_network_config_map]}
          - {get_attr: [ComputeInstanceHA, hostname_network_config_map]}
          - {get_attr: [Networker, hostname_network_config_map]}
          - {get_attr: [ObjectStorage, hostname_network_config_map]}
  AnsibleHostVarsMap:
    description: Map of Ansible Host variables per role
    value: {get_attr: [AnsibleHostVars, value]}